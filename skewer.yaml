title: Skupper HTTP load balancing
subtitle: Deploying multiple HTTP services and load balancing across clusters
github_actions_url: https://github.com/skupperproject/skupper-example-hello-world/actions/workflows/main.yaml
overview: |
  This tutorial demonstrates how to deploy a set of http servers across multiple clusters and observe load balancing over a Virtual Application Network.

  In this tutorial, you will deploy http servers to both a public and a private cluster. You will also create HTTP clients that will access the HTTP servers via the same address. You will observe how the VAN supports balancing client requests across the HTTP servers on both the public and private cluster.
sites:
  public1:
    kubeconfig: ~/.kube/config-public1
    namespace: public1
  public2:
    kubeconfig: ~/.kube/config-public2
    namespace: public2
  private1:
    kubeconfig: ~/.kube/config-private1
    namespace: private1
  private2:
    kubeconfig: ~/.kube/config-private2
    namespace: private2
steps:
  - standard: install_the_skupper_command_line_tool
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - title: Link your namespaces
    preamble: |
      Creating a link requires use of two `skupper` commands in
      conjunction, `skupper token create` and `skupper link create`.

      The `skupper token create` command generates a secret token that
      signifies permission to create a link.  The token also carries the
      link details.  Then, in a remote namespace, The `skupper link
      create` command uses the token to create a link to the namespace
      that generated it.

      **Note:** The link token is truly a *secret*.  Anyone who has the
      token can link to your namespace.  Make sure that only those you
      trust have access to it.

      First, use `skupper token create` in one namespace to generate the
      token.  Then, use `skupper link create` in the other namespaces to create a
      link.
    commands:
      public1:
        - run: skupper token create /tmp/public1.yaml --uses 3
          output: Token written to ~/secret.token
      public2:
        - run: skupper link create /tmp/public1.yaml
          output:  |
            Site configured to link to https://10.105.193.154:8081/ed9c37f6-d78a-11ec-a8c7-04421a4c5042 (name=link1)
            Check the status of the link using 'skupper link status'.
        - run: skupper link status --wait 60
          apply: test
      private1:
        - run: skupper link create /tmp/public1.yaml
          output:  |
            Site configured to link to https://10.105.193.154:8081/ed9c37f6-d78a-11ec-a8c7-04421a4c5042 (name=link1)
            Check the status of the link using 'skupper link status'.
      private2:
        - run: skupper link create /tmp/public1.yaml
          output:  |
            Site configured to link to https://10.105.193.154:8081/ed9c37f6-d78a-11ec-a8c7-04421a4c5042 (name=link1)
            Check the status of the link using 'skupper link status'.
  - title: Deploy the HTTP servers
    preamble: |
      In the **private1** and **public1** clusters, use the `kubectl apply` command
      to install the servers.
    commands:
      public1:
        - run: kubectl apply -f ./server.yaml
          output: deployment.apps/http-server created
      private1:
        - run: kubectl apply -f ./server.yaml
          output: deployment.apps/http-server created
  - title: Expose the HTTP servers
    preamble: |
      Use `skupper create` to create a service that is accessible from any site.
    commands:
      public1:
        - run: skupper service create httpsvc 8080
  - title: Bind the service to the deployment
    preamble: |
      Bind the new service to the HTTP server deployments.
    commands:
      public1:
        - await: deployment/http-server
        - run: skupper service bind httpsvc deployment http-server
      private1:
        - await: deployment/http-server
        - run: skupper service bind httpsvc deployment http-server
  - title: Deploy the HTTP clients
    preamble: |
      In the **private2** and **public2** clusters, use the `kubectl apply` command
      to install the clients.
    commands:
      public2:
        - run: kubectl apply -f ./client.yaml
          output: deployment.apps/http-client created
      private2:
        - run: kubectl apply -f ./client.yaml
          output: deployment.apps/http-client created
  - title: Review the client logs
    preamble: |
      The client pods contain logs showing which server responded to requests.
      Use the `kubectl logs` command to inspect these logs and see how the traffic
      was balanced.
    commands:
      public2:
        - await: deployment/http-client
        - run: kubectl logs $(kubectl get pod -l application=http-client -o=jsonpath='{.items[0].metadata.name}')
          output: |
            Service Name: HTTPSVC
            Service Host: 10.105.108.176
            Service Port: 8080
            Configured concurrency: 50
            Query URL: http://10.105.108.176:8080/request

            ======== Rates per server-pod ========
            http-server-774567c64f-n2qt9: 75.5
            http-server-774567c64f-qw9kw: 84.5
            http-server-774567c64f-2mm88: 87
            http-server-774567c64f-mxfhx: 73
      private2:
        - await: deployment/http-client
        - run: kubectl logs $(kubectl get pod -l application=http-client -o=jsonpath='{.items[0].metadata.name}')
          output: |
            Service Name: HTTPSVC
            Service Host: 10.105.108.176
            Service Port: 8080
            Configured concurrency: 50
            Query URL: http://10.105.108.176:8080/request

            ======== Rates per server-pod ========
            http-server-774567c64f-n2qt9: 75.5
            http-server-774567c64f-qw9kw: 84.5
            http-server-774567c64f-2mm88: 87
            http-server-774567c64f-mxfhx: 73

  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      public1:
        - run: skupper delete
        - run: kubectl delete -f ./server.yaml
      private1:
        - run: skupper delete
        - run: kubectl delete -f ./server.yaml
      public2:
        - run: skupper delete
        - run: kubectl delete -f ./client.yaml
      private2:
        - run: skupper delete
        - run: kubectl delete -f ./client.yaml


summary: |
  This example shows how you can deploy HTTP servers in private
  and public clusters. Using Skupper you can then call those 
  servers from private and public clusters and achieve load 
  balancing for the requests.
